7) - Aula 75 - Implementando a busca de emprestimos na camada de services

parei aqui

6) - Aula 74 - Finalizando a Pesquisa de emprestimo

5) - Aula 73 - Criando EndPoint de Pesquisa de Emprétimos  para filtrar emprestimos    
                Class:
                        @Data // Notação do lombok
                        LoanFilterDTO.java
                                public class LoanFilterDTO{
                                        private String isbn;
                                        private String customer;
                                }

                Class:
                        LoanService.java
                                criar um método:
                                        Page<Loan> find(LoanFilterDTO filterDTO, Pageable pageable);
                
                Class:
                        LoanDTO.java
                                LoanDTO{
                                        private Long id;
                                        private String isbn;
                                        private String customer;
                                        private BookDTO book;
                                }
                
                Class:
                        LoanController.java
                                @PatchMapping("{id}")
                                function returnBook( @PathVarible, @ResquestBody ){
                                        instancia classe Loan chamando service.getById(id).orElseThrow( () -> new ResponseStatusException( HttpStatus.NOT_FOUND ) );
                                        Loan loan = service.getById(id).get();
                                        loan.setReturned(dto.getReturned());
                                        service.update(loan);
                                }

                                @GetMapping
                                function public Page<LoanDTO> find(LoanFilterDTO dto, PageRequest pageRequest){
                                        Page<Loan> result = service.find(dto, pageRequest);
                                        List<LoanDTO loans = result
                                                .getContent()
                                                .stream()
                                                .map( emtity -> {
                                                        Book book = entity.getBook();
                                                        BookDTO bookDTO = modelMapper.map(book, BookDTO.class);
                                                        LoanDTO loanDTO = modelMapper.map(entity, LoanDTO.class);
                                                        loanDTO.setBook(bookDTO);
                                                        return loanDTO;
                                                } ).collect(Collectors.toList());

                                        return new PageImpl<LoanDTO>(loans, pageRequest, result.getTotalElements());
                                }

                Class:
                        LoanControllerTest.java

                                @Test
                                @Display()
                                function public void findLoanTest(){
                                        Long id = 1L;
                                        Loan loan = LoanServiceTest();
                                        loan.setId(id);
                                        Book book = Book.setBook(Book.builder().id(1L).isbn("123").build());
                                        loan.setBook(book);
                                     
                                        BDDMockito.given( loanService.find( Mockito.any( LoanFilterDTO.class ), Mockito.any( Pageble.class ) ) ).willReturn( new PageImpl<Loan>(Arrays.asList(loan), Pagerequest.of(0, 100), 1) );
                                        String queryString = String.format("?isbn=%s&customer=%s&page=0&size=100", book.getIsbn(), loan.getCustomer());
                                        MockHttpServletRequestBuilder request = MockMvcRequestBuilders.get(LOAN_API.concat(queryString)).accept(MediaType.APPLICATION_JSON);

                                        mvc
                                                .perform(request)
                                                .andExpect(status().isOk())
                                                .andExpect(jsonPath("content", Matchers.hasSize(1)))
                                                .andExpect(jsonPath("totalElements").value(1))
                                                .andExpect(jsonPath("pageable.pageSize").value(100))
                                                .andExpect(jsonPath("pageable.pageNumber").value(0))

                                }
      

4) - Aula 72 - Implementando a atualização de empréstimos
                Class:
                        LoanServiceTest.java
                                @Test
                                @Display()
                                function public void updateLoanTest(){
                                        Loan loan = createLoan();
                                        loan.setId(1L);
                                        loan.setReturned(true);                                        
                                        when(repository.save(loan)).thenReturn(loan);
                                        Loan updateLoan = service.update(loan);
                                        assertThat(updateLoan.getReturned()).isTrue();
                                        verify( repository ).save(loan);
                                }

3) - Aula 71 -  Obtendo as informações de um emprestimo por id:
                Class:
                       LoanServiceImpl.java
                                @Override
                                public Loan save(Loan loan){
                                        if( repository.existsByBookAndNotReturned(loan.getBook()) ){
                                                throw new BusinessException("Book already loaned");
                                        }
                                        return repository.save(loan);
                                }

                                @Test
                                @Display()
                                function public function Optional<Loan> getById( Long id ){
                                        return repository.findById(id);
                                }

                                @Test
                                @Display()
                                function Loan update( Long loan ){
                                        return repository.save(loan);
                                }
                Class:
                        LoanServiceTest.java
                                @Test
                                @Display()
                                function public void getLoanDetaisTest(){
                                        Long id = 1
                                        Loan loan = createLoan();
                                        loan.setId(id);
                                        Mockito.when( repository.findById(id)).thenReturn(Optional.of(loan));
                                        Optional<Loan> result = service.getById(id);
                                        assertThat(result.isPresent()).isTrue();
                                        assertThat( result.get().getId()),isEqualTo(id);
                                        assertThat( result.get().getCustomer()).isEqualTo(loan.getCustomer());
                                        assertThat( result.get().getBook()).isEqualTo(loan.getBook());
                                        assertThat( result.get().getLoanDate()).isEqualTo( loan.getLoanDate() );
                                        verify(repository).findById(id);
                                }

                                @Test
                                @Display()
                                function public Loan createLoan(){
                                        Book book = Book.builder().id(iL).build();
                                        String customer = "Fulano";
                                        return Loan.builder().book(book).customer(customer).loanDate(LocalDate.now()).build();
                                }
             

2) - Aula 70 -  Fazendo a devolução de um empréstimo inexistente: ( problema -> tentar devolver um livro que não existe )
                Class:
                        LoanControllerTest.java
                                @Test
                                @Display()
                                criar um function returnInexistentBootTest(){
                                        ReturnedLoanDTO dto = ReturnedLoanDTO.builder().returned(true).build();
                                        String json = new OgjectMapper().writeValueAsString(dto);
                                        BDDMockito.given( loanService.getById(Mockito.anyLong())).willReturn(Optional.empty());
                                        mvc.perform( path(LOAN_API.concat("/1")).accept(MediaType.APPLICATION_JSON).contentType(MediaType.APPLICATION_JSON).content(json) ).andExpect( status().isNotFound() );
                                }

                Class:
                        LoanController.java

                                @GetMapping
                                public Page<LoanDTO> find(LoanFilterDTO dto, Pageable pageRequest){
                                        Page<Loan> result = service.find(dto, pageRequest);
                                        return null;
                                }
                                
                                @GetMapping
                                function returnBook( @PathVarible Long id, @ResquestBody ReturnedLoanDTO dto ){
                                        instancia classe Loan chamando service.getById(id).orElseThrow( () -> new ResponseStatusException( HttpStatus.NOT_FOUND ) );
                                        Loan loan = service.getById(id).get();
                                        loan.setReturned(dto.getReturned());
                                        service.update(loan);
                                }          



1) - Aula 69 -  Funcionalidade de devolução de livros:
                Class:
                        LoanControllerTest.java
                                @Test
                                @Display()
                                function returnBookTest(){
                                        criar uma instancia de uma classe ReturnedLoanDTO - ReturnedLoanDTO dot = ReturnedLoanDTO.builder().returned(true).build();
                                        ** chama instancia do Mockito **
                                        BDDMockito.given(loanService.getById(Mockito.anyLong())).willReturn(Optional.of(Loan.builder().id(1L).build()));
                                        String json =  nre Objectmapper().writeValueAsString(dto);
                                        Mockito.verify( loanService, Mockito.times(1) ).update(loan);
                                }
                Class:
                        LoanController.java
                                @Test
                                @Display()
                                function returnBook( @PathVarible, @ResquestBody ){
                                        instancia classe Loan chamando service.getById(id).get();
                                        Loan loan = service.getById(id).get();
                                        loan.setReturned(dto.getReturned());
                                        service.update(loan);
                                }
                Class:
                        LoanService.java
                                cria um metodo com -> Optional<Loan> getById(Loan id);



